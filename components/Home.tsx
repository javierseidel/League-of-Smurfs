import Head from 'next/head'
import React from 'react'
import { Inter } from '@next/font/google'
import styles from '../styles/Home.module.css'
import firebase from '../firebase/clientApp'
import { collection, query, where, deleteDoc, addDoc, doc, setDoc, onSnapshot } from "firebase/firestore";
import {useEffect, useState} from 'react'
import Accounts from './Accounts'

const inter = Inter({ subsets: ['latin'] })

export default function Home() {

  const [newAccName, setnewAccName] = useState("");
  const [newUserName, setnewUserName] = useState("");
  const [newPass, setnewPass] = useState("");
  const [loading, setLoading] = useState(false);
  const [users, setUsers] = useState<any[]>([]);

  // initializes our authorization from firebase
  const auth = firebase.auth() as any;

  // stores the current user ID in a variable
  const uid = auth.currentUser ? auth.currentUser.uid : null;
  
  // initializes our firestore database
  const db = firebase.firestore() as any;
  const colRef =  collection(db, "users");

  // async function to add a new account
  async function addNewAcc() {
    const add = await addDoc(colRef, {accountName: newAccName, userName: newUserName, accountPassword: newPass, userID: uid})
  }
  
  // function which updates the screen with accounts from the user who is logged in

  useEffect(() => {
    const q = query(
      colRef, where('userID', '==', uid) 
      );

    setLoading(true);
    const unsub = onSnapshot(q, (querySnapshot) => {
      const items: Array<any> = [];
      querySnapshot.forEach((doc) => {
        items.push({...doc.data(), id:doc.id});
      });
      setUsers(items);
      setLoading(false);
    });
    return () => {
      unsub();
    };

    // eslint-disable-next-line
  }, []);
  
// this works to query, but I found a MUCH better way

  // // async function to query our data
  // async function queryRes(){
  //   const q = query(colRef, where("userID", "==", uid));
  //   const users = await getDocs(q);
  //   users.forEach(user => {

  //     console.log(user.data())
  //   })
  // }

  // // checks to make see if our data is not loading. if it is, we run our query
  // if (!accountsLoading){
  //   queryRes();
  // }

  const deleteAcc = async (id: any) => {
    const userDoc = doc(db, "users", id);
    await deleteDoc(userDoc);
  };

  return (
    <>
      <Head>
        <title>League App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
          <div>
            <form className = "add">
              <input type="text" placeholder="Account Name..." onChange={(event) => {setnewAccName(event.target.value)}}/>
              <input type="text" placeholder="Account UserName..." onChange={(event) => {setnewUserName(event.target.value)}}/>
              <input type="text" placeholder="Account Password..." onChange={(event) => {setnewPass(event.target.value)}}/>
              <button type="button" onClick={addNewAcc}>Add</button>
            </form>
          </div>
        <div >
          {users.map((user) => (
            <div className={styles.card}>
              <Accounts accountName={user.accountName} userName={user.userName} accountPassword={user.accountPassword} />
              <button onClick={() => deleteAcc(user.id)}>X</button>
              
            </div>
            ))}
        </div>
      </main>
    </>
  )
}
